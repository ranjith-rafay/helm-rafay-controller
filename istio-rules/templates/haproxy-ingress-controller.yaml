---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-ingress-service-account
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-ingress-cluster-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - services
  - namespaces
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - core.haproxy.org
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - "apps"
  resources:
  - replicasets
  - deployments
  - daemonsets
  verbs:
  - get
  - list
- apiGroups:
  - core.haproxy.org
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-ingress-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-ingress-cluster-role
subjects:
- kind: ServiceAccount
  name: haproxy-ingress-service-account
  namespace: istio-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy
data:
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
data:
  8081:
    rafay-core/nexus-service:8081
  5000:
    rafay-core/nexus-service:5000
  443:
    istio-system/https-service:443
  80:
    istio-system/https-service:80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: ingress-default-backend
  name: ingress-default-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      run: ingress-default-backend
  template:
    metadata:
      labels:
        run: ingress-default-backend
    spec:
      containers:
      - name: ingress-default-backend
        image: {{ .Values.haproxy.ingress_default_backend.image_v2 }}
        ports:
        - containerPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: https-service
spec:
  ports:
    - protocol: TCP
      name: tcp-443
      port: 443
      targetPort: 30526
    - protocol: TCP
      name: tcp-80
      port: 80
      targetPort: 30426
---
kind: Endpoints
apiVersion: v1
metadata:
  name: https-service
subsets:
  - addresses:
      - ip: {{ .Values.global.controller_ip }}
    ports:
      - port: 30526
        name: tcp-443
      - port: 30426
        name: tcp-80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: ingress-default-backend
  name: ingress-default-backend
spec:
  selector:
    run: ingress-default-backend
  ports:
  - name: port-1
    port: 8080
    protocol: TCP
    targetPort: 8080
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-ingress
spec:
  selector:
    matchLabels:
      run: haproxy-ingress
  template:
    metadata:
      labels:
        run: haproxy-ingress
    spec:
      serviceAccountName: haproxy-ingress-service-account
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: haproxy-ingress
        image: {{ .Values.haproxy.haproxy_ingress.image_v2 }}
        args:
          - --configmap=istio-system/haproxy
          - --default-backend-service=istio-system/ingress-default-backend
          - --configmap-tcp-services=istio-system/tcp-services
          - --watch-namespace=istio-system
          - --log=trace
          - --disable-http
          - --disable-https
          - --disable-ipv6
        resources:
          requests:
            cpu: "500m"
            memory: "50Mi"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: https
          containerPort: 443
          hostPort: 443
        - name: tcp-nexus
          containerPort: 8081
          hostPort: 8081
        - name: tcp-docker
          containerPort: 5000
          hostPort: 5000
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
