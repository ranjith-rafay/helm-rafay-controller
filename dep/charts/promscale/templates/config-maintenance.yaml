apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "connector.fullname" . | trunc 51 }}-maintenance
  namespace: {{ .Values.namespace }}  
  labels:
    app: {{ template "connector.fullname" . }}
    chart: {{ template "connector.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  truncate_series.sql: |-
    CREATE OR REPLACE FUNCTION _prom_catalog.truncate_series()
    RETURNS TEXT 
    AS $$
    DECLARE
    found_metric_names _prom_catalog.metric%ROWTYPE;
    alabels int[];
    label int;
    unused_series_row _prom_catalog.series%ROWTYPE;
    unused_labels_row _prom_catalog.label%ROWTYPE;
    BEGIN
            DROP TABLE IF EXISTS _prom_catalog.unused_series CASCADE;
            CREATE TEMP TABLE _prom_catalog.unused_series AS SELECT * FROM series limit 0;
            DROP TABLE IF EXISTS _prom_catalog.used_series CASCADE;
            CREATE TEMP TABLE _prom_catalog.used_series AS SELECT * FROM series limit 0;
            FOR found_metric_names IN SELECT * FROM _prom_catalog.metric LOOP
                EXECUTE 'INSERT INTO _prom_catalog.unused_series ' || 'select * FROM _prom_catalog.series where metric_id = '|| found_metric_names.id ||' AND id not in (select distinct k.series_id from prom_metric."'||found_metric_names.table_name||'" k);';
            END LOOP;
            FOR found_metric_names IN SELECT * FROM metric LOOP
                EXECUTE 'INSERT INTO _prom_catalog.used_series ' || 'select * FROM _prom_catalog.series where metric_id = '|| found_metric_names.id ||' AND id in (select distinct k.series_id from prom_metric."'||found_metric_names.table_name||'" k);';
            END LOOP;
            DROP TABLE IF EXISTS _prom_catalog.unused_labels CASCADE;
            CREATE TEMP TABLE _prom_catalog.unused_labels AS SELECT * FROM label limit 0;
            DROP TABLE IF EXISTS _prom_catalog.used_labels CASCADE;
            CREATE TEMP TABLE _prom_catalog.used_labels AS SELECT * FROM label limit 0;
            FOR alabels in select labels from _prom_catalog.unused_series LOOP
                FOREACH label in array alabels LOOP
                EXECUTE 'INSERT INTO _prom_catalog.unused_labels ' || 'select * FROM _prom_catalog.label where id = '||label;
                END LOOP;
            END LOOP;
            FOR alabels in select labels from _prom_catalog.used_series LOOP
                FOREACH label in array alabels LOOP
                EXECUTE 'INSERT INTO _prom_catalog.used_labels ' || 'select * FROM _prom_catalog.label where id = '||label;
                END LOOP;  
            END LOOP;
            FOR unused_series_row in select * from _prom_catalog.unused_series LOOP
                EXECUTE 'DELETE FROM _prom_catalog.series WHERE id = '||unused_series_row.id;
            END LOOP;
            FOR unused_labels_row in select * from _prom_catalog.unused_labels where id not in (select id from _prom_catalog.used_labels) and key != '__name__' LOOP
                EXECUTE 'DELETE FROM _prom_catalog.label WHERE id = '||unused_labels_row.id;
            END LOOP;
            DROP TABLE IF EXISTS _prom_catalog.unused_series CASCADE;
            DROP TABLE IF EXISTS _prom_catalog.used_series CASCADE;
            DROP TABLE IF EXISTS _prom_catalog.unused_labels CASCADE;
            DROP TABLE IF EXISTS _prom_catalog.used_labels CASCADE;
            RETURN 'OK';
    END
    $$
    LANGUAGE PLPGSQL STABLE;
    GRANT EXECUTE ON FUNCTION _prom_catalog.truncate_series() TO prom_reader;
  execute_maintenance.sh: |-
    #!/bin/sh
    psql $PROMSCALE_DB_URI \
    -e -q -c "select set_default_retention_period(1 * INTERVAL '1 day');"
    psql $PROMSCALE_DB_URI \
    -e -q -c "CALL prom_api.execute_maintenance();"
    if [ $? -eq 0 ]
    then
      echo "Maintenance completed successfully."
      echo "Retention policies executed."
    else
      echo "Maintenance job failed!"
      exit 1
    fi
