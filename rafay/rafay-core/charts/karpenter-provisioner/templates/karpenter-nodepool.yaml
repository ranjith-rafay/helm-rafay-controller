apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["{{ .Values.global.karpenter.instance.capacity_type }}"]
        - key: node.kubernetes.io/instance-type
          operator: In
          values: ["{{ .Values.global.karpenter.instance.instance_type }}"]
      nodeClassRef:
        name: default
  limits:
    cpu: 1000
  #disruption:
    #consolidationPolicy: WhenUnderutilized
    #expireAfter: 720h # 30 * 24h = 720h
---
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiFamily: "{{ .Values.global.karpenter.instance.amifamily }}"
  role: "{{ .Values.global.cluster_name }}-workernode-role"
  subnetSelectorTerms:
  - tags:
      {{- if eq .Values.global.karpenter.instance.shared_subnet.enabled true }}
      kubernetes.io/cluster/{{ .Values.global.cluster_name }}: shared
      {{ else }}
      karpenter.sh/discovery: "{{ .Values.global.cluster_name }}"
      {{ end }}
  securityGroupSelectorTerms:
  - tags:
      kubernetes.io/cluster/{{ .Values.global.cluster_name }}: owned
  {{- if eq .Values.global.karpenter.instance.tag.enable true }}
  tags:
    {{- $tags := .Values.global.karpenter.instance.tags }}
    {{- $tags1 := splitList " " $tags -}}
    {{- range $key, $value := $tags1 }}
      {{ $parts := splitList ":" $value }}
      {{ $parts_first := split ":" $value }}
      {{- range $key1, $value1 := $parts }}  
        {{ $parts_first._0 }}: {{ $value1 }}
      {{ end }}
    {{ end }}
  {{ end }}
  {{- if and (eq .Values.global.isCustomRegistry true ) (eq .Values.global.generate_self_signed_cert true) }}    
  userData: |
    MIME-Version: 1.0
    Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

    --==MYBOUNDARY==
    Content-Type: text/x-shellscript; charset="us-ascii"

    #!/bin/bash
    set -o xtrace
    #/etc/eks/bootstrap.sh
    /etc/eks/bootstrap.sh "{{ .Values.global.cluster_name }}"

    echo "Re-enable IPV4 forwarding"
    sed -i 's/net.ipv4.ip_forward.*//' /etc/sysctl.conf
    echo \"net.ipv4.ip_forward=1\" >> /etc/sysctl.conf
    sysctl -p /etc/sysctl.conf
    sysctl -w net.ipv4.ip_forward=1
    sysctl --quiet --system

    echo "Override of Dockerhub"
    cat <<-EOF > /etc/docker/daemon.json
    {
      "bridge": "none",
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "10"
      },
      "live-restore": true,
      "max-concurrent-downloads": 10,
      "default-ulimits": {
        "memlock": {
          "Hard": -1,
          "Name": "memlock",
          "Soft": -1
        }
      },
      "registry-mirrors": ["https://docker-cache.repository.intranet.roche.com"]
    }
    EOF
    star_domain_name={{ .Values.global.default_partner_console_domain }}
    certs_dir="/etc/containerd/certs.d/core-registry.$star_domain_name"
    hosts_toml_file="$certs_dir/hosts.toml"

    if [ -d "$certs_dir" ] && [ -f "$hosts_toml_file" ]; then
      echo "Directory and hosts.toml file already exist"
    elif [ -d "$certs_dir" ]; then
      echo "Directory already exists"
    else
      mkdir -p "$certs_dir"
      server="http://core-registry.$star_domain_name"
      # Create the hosts.toml file with the dynamic server
      cat <<EOF > "$hosts_toml_file"
    server = "$server"

    [host."$server"]
      skip_verify = true
    EOF
      echo "hosts.toml file has been created"
    fi
    --==MYBOUNDARY==--

    ${USER_CUSTOM_COMMANDS}
    {{ end }}
