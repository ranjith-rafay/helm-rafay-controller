apiVersion: v1
kind: ServiceAccount
metadata: 
  name: cluster-config-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role 
metadata: 
  name: cluster-config-role 
rules: 
  - apiGroups:
    - ""
    resources:
    - configmaps
    - endpoints
    verbs:
    - '*'
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding 
metadata: 
  name: cluster-config-rb 
subjects:
  - kind: ServiceAccount
    name: cluster-config-sa 
    namespace: rafay-core 
roleRef: 
  kind: Role
  name: cluster-config-role 
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-config
  labels:
    app: cluster-config
spec:
{{- if eq .Values.global.ha_enabled true }}
  replicas: {{ default "3" .Values.global.minReplicaCount }}
{{- else }}
  replicas: {{ default "1" .Values.global.minReplicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: cluster-config
  template:
    metadata:
      labels:
        app: cluster-config
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - cluster-config
              topologyKey: kubernetes.io/hostname
      serviceAccount: cluster-config-sa
      containers:
        - name: cluster-config
          {{- if or (eq .Values.global.ha_enabled true) (eq .Values.global.size "S") (eq .Values.global.size "M") (eq .Values.global.size "L") }}
          resources:
            limits:
              cpu: "{{ .Values.cpu_limits }}"
              memory: "{{ .Values.memory_limits }}"
            requests:
              cpu: "{{ .Values.cpu_requests }}"
              memory: "{{ .Values.memory_requests }}"
          {{- end }}
          image: {{ .Values.cluster_config_image }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: api-port
              containerPort: 8000
              protocol: TCP
          env:
            - name: PG_HOST
              value: postgres-admin
            - name: PG_PORT
              value: "5432"
            - name: PG_DATABASE
              value: edgedb
            - name: RAFAY_CONFIG_PORT
              value: "7000" 
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  key: edge.db.user
                  name: edgesrv-secrets
          {{- if .Values.global.is_external_database }}
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: edgedb-db-secret
          {{- else }}
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: edgedbuser.postgres-admin.credentials.postgresql.acid.zalan.do
          {{- end }}
            - name: CT_PG_DATABASE
              value: clustertemplatedb
            - name: CT_PG_USERNAME
              valueFrom:
                secretKeyRef:
                  key: clustertemplate.db.user
                  name: {{.Chart.Name}}-secrets
          {{- if .Values.global.is_external_database }}
            - name: CT_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: clustertemplatedb-db-secret
          {{- else }}
            - name: CT_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: clustertemplatedbuser.postgres-admin.credentials.postgresql.acid.zalan.do
          {{- end }}
          {{- if .Values.global.ssl_mode }}
            - name: PGSSLMODE
              value: {{ default "" .Values.global.ssl_mode }}
          {{- end }} 
          livenessProbe:
            httpGet:
              path: /live
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 5
---
{{- if .Values.global.ha_enabled }}
{{- if ne .Values.global.size "S" }}
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: cluster-config
  name: cluster-config
spec:
  maxReplicas: {{ default "10" .Values.maxReplicas }}
{{- if eq .Values.global.ha_enabled true }}
  minReplicas: {{ default "3" .Values.global.minReplicaCount }}
{{- else }}
  minReplicas: {{ default "1" .Values.global.minReplicaCount }}
{{- end }}
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cluster-config
  targetCPUUtilizationPercentage: 80
{{- end }}
{{- end }}
